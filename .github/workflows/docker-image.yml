name: Docker Image Deployment to EC2

on:
  push:
    branches:
      - sprint/*
      - release/*
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t keeper:latest -f ./apps/keeper/Dockerfile .

      - name: Save Docker image
        run: docker save keeper:latest > image.tar

      - name: Copy Docker image to EC2
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 700 private_key
          scp -o StrictHostKeyChecking=no -i private_key image.tar ${EC2_USER}@${EC2_HOST}:~
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Load and run Docker image on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} '
            sudo docker load < image.tar

            # Stop and remove any existing container
            sudo docker stop keeper-container || true
            sudo docker rm keeper-container || true

            # Run the new container
            sudo docker run -d -p 3002:3002 \
              --name keeper-container \
              -e KEEPER_HOST="0.0.0.0" \
              -e KEEPER_PORT="3002" \
              -e KEEPER_PRIVATE_KEY="'$KEEPER_PRIVATE_KEY'" \
              -e KEEPER_BEARER_TOKEN="'$KEEPER_BEARER_TOKEN'" \
              keeper:latest
          '
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          KEEPER_PRIVATE_KEY: ${{ secrets.KEEPER_PRIVATE_KEY }}
          KEEPER_BEARER_TOKEN: ${{ secrets.KEEPER_BEARER_TOKEN }}

      - name: Clean up Artifacts
        run: |
          rm -f private_key
          rm -f image.tar
